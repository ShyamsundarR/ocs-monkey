---

# yamllint disable rule:line-length
sudo: true
dist: xenial
env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config
    - KUBE_VERSION="1.15.0"
    - HELM_VERSION="v3.0.0-alpha.2"
    # Repo for the OSIO workload generator
    - WORKLOAD_REPO=johnstrunk/osio-workload
    - MONKEY_GENERATOR_REPO=johnstrunk/ocs-monkey-generator
addons:
  apt:
    packages:
      - docker-ce
      - realpath
      - ruby
      - shellcheck

jobs:
  include:
    - name: Workload generator
      language: python
      python: 3.6
      install:
        - pip install --upgrade pip
        - travis_retry gem install asciidoctor mdl
        - travis_retry pip install yamllint tox
        - travis_retry curl -L 'https://raw.githubusercontent.com/helm/helm/master/scripts/get' | bash -s -- --version ${HELM_VERSION}
        # Install minikube - based on https://github.com/LiliC/travis-minikube
        - travis_retry curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v${KUBE_VERSION}/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        - travis_retry curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.2.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
        - mkdir -p "$HOME/.kube" "$HOME/.minikube"
        - touch "$KUBECONFIG"
        - sudo minikube start --vm-driver=none --kubernetes-version=v${KUBE_VERSION}
        - "sudo chown -R travis: /home/travis/.minikube/"
      before_script:
        - kubectl cluster-info
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
        - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
      script:
        - tox -v -e py36,py36-kubetest,srclint
        - helm lint helm/ocs-monkey-generator
        - ./build.sh "${MONKEY_GENERATOR_REPO}"
        - docker inspect "${MONKEY_GENERATOR_REPO}"
      deploy:
        # Master branch will push the container to :latest
        - provider: script
          on:  # yamllint disable-line rule:truthy
            branch: master
          script: .travis/push_container.sh "${MONKEY_GENERATOR_REPO}" verbatim latest
        # Tags of the form v + SEMVER (e.g., v1.2.3) will push to the
        # corresponding container version number (e.g., :1.2.3).
        - provider: script
          on:  # yamllint disable-line rule:truthy
            tags: true
            condition: $TRAVIS_TAG =~ ^v[0-9]+
          script: .travis/push_container.sh "${MONKEY_GENERATOR_REPO}" version "$TRAVIS_TAG"
    - name: OSIO workload
      language: generic
      script:
        - cd osio-workload
        - ./build.sh "${WORKLOAD_REPO}"
        - docker inspect "${WORKLOAD_REPO}"
        - cd ..
      deploy:
        # Master branch will push the container to :latest
        - provider: script
          on:  # yamllint disable-line rule:truthy
            branch: master
          script: .travis/push_container.sh "${WORKLOAD_REPO}" verbatim latest
        # Tags of the form v + SEMVER (e.g., v1.2.3) will push to the
        # corresponding container version number (e.g., :1.2.3).
        - provider: script
          on:  # yamllint disable-line rule:truthy
            tags: true
            condition: $TRAVIS_TAG =~ ^v[0-9]+
          script: .travis/push_container.sh "${WORKLOAD_REPO}" version "$TRAVIS_TAG"
